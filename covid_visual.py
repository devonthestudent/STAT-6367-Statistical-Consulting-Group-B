# -*- coding: utf-8 -*-
"""COVID visual.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18Zl3Bzt6QXWZagmjotWgLuuELesDXDj1

## Contents
* <a href="#static">Static bar plot</a>
* <a href="#race1">bar_chart_plot</a>
* <a href="#race2">bar_chart_race</a>
* <a href="#map">Interactive map</a>
"""

import pandas as pd
import numpy as np
import matplotlib.ticker as ticker
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive/')
import pandas as pd
filename=r"/content/drive/My Drive/Covid 19/United_States_COVID-19_Cases_and_Deaths_by_State_over_Time.csv"

covid1 = pd.read_csv(filename)

covid1.columns



covid1.rename(columns={'submission_date':'date'},inplace=True)

covid=covid1[["date","state","tot_cases","conf_cases","conf_death","tot_death"]]

covid['date']=pd.to_datetime(covid['date']).dt.date

grouped = covid.groupby(['state','date'])
covid_confirmed = grouped.sum().reset_index().sort_values(['date'],ascending=False)

import datetime
case_date=datetime.date(2020,4, 30)

df = (covid_confirmed[covid_confirmed['date'].eq(case_date)].sort_values(by="tot_cases",ascending=False).head(10))

#plotting the initial horaizontal barchart 
fig, ax = plt.subplots(figsize=(15, 8))
ax.barh(df['state'], df['tot_cases'])
plt.xlabel('Number of totual Cases')
plt.ylabel('state')

dff=df[::-1]
fig, ax = plt.subplots(figsize=(15, 8))
ax.barh(dff['state'], dff['tot_cases'])
plt.xlabel('Number of total Cases')
plt.ylabel('state')

from random import randint
import random
c_code = []
random.seed(1000)
for i in range(len(covid_confirmed.state.unique())):
    c_code.append('#%06X' % randint(0, 0xFFFFFF))
    
colors = dict(zip(covid_confirmed.state.unique(),c_code))

colors = dict(zip(df.state.unique(),['#adb0ff', '#ffb3ff', '#90d595', '#e48381', '#f7bb5f','#fb6b19','#1fb1fb'] * 31
))

"""<a id="#static"></a>
#Static Plot of Covid Cases by State

<a href="#top">Back to Top</a>
"""

fig, ax = plt.subplots(figsize=(15, 8))
# pass colors values to `color=`
ax.barh(dff['state'], dff['tot_cases'], color=[colors[x] for x in dff['state']])
# iterate over the values to plot labels and values (Tokyo, Asia, 38194.2)
for i, (value, name) in enumerate(zip(dff['tot_cases'], dff['state'])):
    ax.text(value, i,     name,            ha='right')  # Tokyo: name
    ax.text(value, i-0.25,     value,           ha='right')   # 38194.2: value
# Add year right middle portion of canvas
ax.text(1, 0.4, case_date, transform=ax.transAxes, size=46, ha='right')

fig, ax = plt.subplots(figsize=(15, 8))
def draw_barchart(date,case="tot_death"):
    dff= (covid_confirmed[covid_confirmed['date'].eq(date)].sort_values(by=case,ascending=False).head(10))[::-1]
    ax.clear()
    ax.barh(dff['state'], dff[case], color=["#980505","#CD1212","#D84E4E","#CB6262","#D39B5F","#F7EC10","#D0F710","#9CF710","#B4D67F","#969C8E"][::-1])
    dx = dff[case].max() / 200
    for i, (value, name) in enumerate(zip(dff[case], dff['state'])):
        ax.text(value-dx, i,     name,           size=14, weight=600, ha='right', va='bottom')
        ax.text(value-dx, i-.25, value, size=10, color='#17202A', ha='right', va='baseline')
        #ax.text(value+dx, i,     f'{value:,.0f}',  size=14, ha='left',  va='center')
    # ... polished styles
    ax.text(1, 0.4, date, transform=ax.transAxes, color='#777777', size=30, ha='right', weight=800)
    ax.text(0, 1.06, 'Number of Cases', transform=ax.transAxes, size=12, color='#777777')
    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))
    ax.xaxis.set_ticks_position('top')
    ax.tick_params(axis='x', colors='#777777', labelsize=12)
    ax.set_yticks([])
    ax.margins(0, 0.01)
    ax.grid(which='major', axis='x', linestyle='-')
    ax.set_axisbelow(True)
    ax.text(0, 1.12, 'The number of '+str(case)+' Cases upto 25 April 2020',
            transform=ax.transAxes, size=24, weight=600, ha='left')
    ax.text(1, 0, 'by @Devon; credit @Zubair', transform=ax.transAxes, ha='right',
            color='#777777', bbox=dict(facecolor='white', alpha=0.8, edgecolor='white'))
    plt.box(False)

draw_barchart(datetime.date(2020,4,30))

"""#Bar Chart Race plot 1

<a id="race1"></a>
<a href="#top">Back to Top</a>
"""

from matplotlib import animation as F
from IPython.display import HTML
fig,ax = plt.subplots(figsize=(16,10)) #Set figure for plot
animator = F.FuncAnimation(fig,draw_barchart,frames=sorted(covid.date.unique()),interval=300) #Building animation
HTML(animator.to_jshtml())

covid_raceplot = covid[['date', 'tot_cases','state']]

df=covid_raceplot.pivot_table( values='tot_cases', index = ['date'], columns='state')

top_state= set()

for index, row in df.iterrows():
    top_state |= set(row[row > 0].sort_values(ascending=False).head(10).index)

df = df[top_state]

!pip install bar-chart-race

import bar_chart_race as bcr

"""#Bar Chart Race plot 2

<a id="race2"></a>
<a href="#top">Back to Top</a>
"""

from IPython.display import HTML

html = bcr.bar_chart_race(df = df, 
                   n_bars = 10, 
                   sort='desc',
                   title='Total Cases')

html



!pip install plotly plotly

import plotly as py
import plotly.express as px
modified_confirmed=covid_confirmed
modified_confirmed['Affected_Factor'] = np.log10(modified_confirmed.tot_cases)
modified_confirmed['Date'] = modified_confirmed['date'].apply(lambda x: x.strftime('%Y/%m/%d'))

"""#Interactive Map

<a id="map"></a>
<a href="#top">Back to Top</a>
"""

fig = px.choropleth(
    modified_confirmed[::-1], #Dataframe
    locations= 'state', #Spatial coordinates, can give Lat and Lon in separate params
    locationmode= "USA-states", #Type of spatial coordinates
    color= 'Affected_Factor', #Values to be color coded
    hover_name= 'state', #Text to be displayed in Bold upon hover
    hover_data= ['tot_cases','tot_death'], #Extra text to be displayed in Hover tip
    animation_frame= 'Date', #Data for animation, time-series data
    color_continuous_scale=px.colors.diverging.RdYlGn[::-1]
)

fig.update_layout(
    title_text =   " COVID-19 Spread in the U.S. up to Feb, 2020",
    title_x = 0.5,
    geo= dict(
        scope='usa',
        showframe= False,
        showcoastlines= False,
        projection_type = 'albers usa'
    )
)

filename=r"/content/drive/My Drive/Covid 19/PH.csv"

df_health = pd.read_csv(filename)
print(df_health.head())
pd.set_option('display.max_rows', 10)

import re
health_coverage=[] # percentage of population receiving public health insurance
state_name=[] # full state name
state_pop=[] #state population
for i in range(0,len(df_health.iloc[0])):
  if ((i-5) % 6)==0:
    string=df_health.iloc[0][i]
    string = re.sub(r'%', '', string)
    health_coverage += [float(string)]
    string=df_health.columns[i]
    string= string.split('!!')[0]
    state_name += [string]
    string = df_health.iloc[0][i-4]
    string= string.replace(",","")
    state_pop+= [int(string)]

us_state_abbrev = {
    'Alabama': 'AL',
    'Alaska': 'AK',
    'American Samoa': 'AS',
    'Arizona': 'AZ',
    'Arkansas': 'AR',
    'California': 'CA',
    'Colorado': 'CO',
    'Connecticut': 'CT',
    'Delaware': 'DE',
    'District of Columbia': 'DC',
    'Florida': 'FL',
    'Georgia': 'GA',
    'Guam': 'GU',
    'Hawaii': 'HI',
    'Idaho': 'ID',
    'Illinois': 'IL',
    'Indiana': 'IN',
    'Iowa': 'IA',
    'Kansas': 'KS',
    'Kentucky': 'KY',
    'Louisiana': 'LA',
    'Maine': 'ME',
    'Maryland': 'MD',
    'Massachusetts': 'MA',
    'Michigan': 'MI',
    'Minnesota': 'MN',
    'Mississippi': 'MS',
    'Missouri': 'MO',
    'Montana': 'MT',
    'Nebraska': 'NE',
    'Nevada': 'NV',
    'New Hampshire': 'NH',
    'New Jersey': 'NJ',
    'New Mexico': 'NM',
    'New York': 'NY',
    'North Carolina': 'NC',
    'North Dakota': 'ND',
    'Northern Mariana Islands':'MP',
    'Ohio': 'OH',
    'Oklahoma': 'OK',
    'Oregon': 'OR',
    'Pennsylvania': 'PA',
    'Puerto Rico': 'PR',
    'Rhode Island': 'RI',
    'South Carolina': 'SC',
    'South Dakota': 'SD',
    'Tennessee': 'TN',
    'Texas': 'TX',
    'Utah': 'UT',
    'Vermont': 'VT',
    'Virgin Islands': 'VI',
    'Virginia': 'VA',
    'Washington': 'WA',
    'West Virginia': 'WV',
    'Wisconsin': 'WI',
    'Wyoming': 'WY'
}